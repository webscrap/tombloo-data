<?xml version="1.0"?>
<bindings id="tombloo-completion-bindings"
	xmlns="http://www.mozilla.org/xbl" 
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xbl="http://www.mozilla.org/xbl" 
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	
	<binding id="container">
		<resources>
			<stylesheet src="chrome://tombloo/content/completion.css"/>
		</resources>
		
		<content style="cursor: text;">
			<xul:textbox 
				anonid="textbox" 
				xbl:inherits="tooltiptext=inputtooltiptext,onfocus,onblur,value,type,maxlength,disabled,size,readonly,userAction,flex,emptytext" />
			<xul:popup anonid="popup" ignorekeys="true">
				<xul:listbox anonid="listbox" style="height: auto;"/>
			</xul:popup>
			<xul:box>
				<xul:label anonid="measure" hidden="true"/>
			</xul:box>
		</content>
		
		<implementation>
			<constructor><![CDATA[
			function _log(msg){
				Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage(''+msg);
			}
			
			var event = document.createEvent('Events');
			event.initEvent('construct', false, true);
			this.dispatchEvent(event);
			]]></constructor>
			
			<field name="textbox">
				document.getAnonymousElementByAttribute(this, 'anonid', 'textbox');
			</field>
			
			<property name="value"
				onset="return this.textbox.value = val;"
				onget="return this.textbox.value;"/>
			<property name="values"
				onget="return this.textbox.values;"/>
			<property name="candidates"
				onset="return this.textbox.candidates = val;"/>
			<property name="autoComplete"
				onget="return this.textbox.autoComplete;"
				onset="return this.textbox.autoComplete = val;"/>
			<property name="newWords"
				onget="return this.textbox.newWords;"/>
			
			<!-- textboxとの互換性のため -->
			<property name="inputField"
				onget="return this.textbox.input;"/>
			
			<method name="focus">
				<body><![CDATA[
					this.textbox.focus();
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<binding id="textbox" extends="chrome://global/content/bindings/textbox.xml#textbox">
		<implementation>
			<field name="candidates">
				[];
			</field>
			<field name="delay">
				130;
			</field>
			<field name="delimiter">
				' ';
			</field>
			<field name="container">
				this.parentNode;
			</field>
			<field name="popup">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'popup');
			</field>
			<field name="listbox">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'listbox');
			</field>
			<field name="measure">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'measure');
			</field>
			<field name="input">
				document.getAnonymousElementByAttribute(this, 'anonid', 'input')
					.QueryInterface(Components.interfaces.nsIDOMNSEditableElement);
			</field>
			<field name="content">
				this.input.editor.rootElement;
			</field>
			<field name="autoComplete">
				false;
			</field>
			
			<property name="values"
				onget="return this.value.split(this.delimiter).filter(function(i){return i});"/>
			<property name="padding"
				onget="return this._padding || (this._padding = Math.ceil(parseFloat(window.getComputedStyle(this, '').paddingLeft)))" />
			
			<property name="newWords">
				<getter><![CDATA[
					var check = {};
					this.values.forEach(function(val){
						check[val] = true;
					});
					
					this.candidates.forEach(function(cand){
						delete check[cand.value];
					});
					
					var res = [];
					for(var word in check)
						res.push(word);
					
					return res;
				]]></getter>
			</property>
			
			<method name="notify">
				<body><![CDATA[
					function tween(func, span, count, callback){
						count = (count || 20);
						var interval = span / count;
						var value = 0;
						var calls = 0;
						var intervalId = setInterval(function(){
							func(calls / count);
							
							if(count == calls){
								canceler();
								return;
							}
							calls++;
						}, interval);
						var canceler = function(){
							callback && callback();
							callback = null;
							clearInterval(intervalId)
						}
						
						return canceler;
					}
					
					function toHexString(c){
						return  '' + 
							toColorPart(255 * c.r) +
							toColorPart(255 * c.g) +
							toColorPart(255 * c.b);
					}
					
					function toColorPart(num) {
						num = Math.round(num);
						var res = num.toString(16);
						if (num < 16)
							return '0' + res;
						
						return res;
					}
					
					function hslToRGB(h, s, l){
						var r, g, b;
						if (s === 0) {
							r = g = b = l;
						} else {
							var m2;
							if (l <= 0.5) {
								m2 = l * (1.0 + s);
							} else {
								m2 = l + s - (l * s);
							}
							var m1 = (2.0 * l) - m2;
							var hsl = function(n1, n2, h){
								if (h > 6.0){
									h -= 6.0;
								} else if (h < 0.0){
									h += 6.0;
								}
								
								var val;
								if (h < 1.0) {
									val = n1 + (n2 - n1) * h;
								} else if (h < 3.0) {
									val = n2;
								} else if (h < 4.0) {
									val = n1 + (n2 - n1) * (4.0 - h);
								} else {
									val = n1;
								}
								return val;
							};
							
							var h6 = h * 6.0;
							r = hsl(m1, m2, h6 + 2);
							g = hsl(m1, m2, h6);
							b = hsl(m1, m2, h6 - 2);
						}
						return {r: r, g: g, b: b,};
					}
					
					var self = this;
					return (this.notify = function(){
						// 誤入力を防止するため、タグ決定後一定時間キー入力を受けつけない
						self.sleeping = true;
						self.canceler && self.canceler();
						self.canceler = tween(function(ratio){
							// #ccf0ff
							self.input.style.backgroundColor = '#' + toHexString(hslToRGB(0.55, 1, 0.9 + (0.1*ratio)));
						}, self.delay, 10, function(){
							self.sleeping = false;
						});
					})();
					
				]]></body>
			</method>
			
			<method name="removeWord">
				<parameter name="word"/>
				<body><![CDATA[
					var values = this.values;
					var index = values.indexOf(word);
					if(index != -1)
						values.splice(index, 1);
					values = values.join(this.delimiter);
					this.value = values + (values? this.delimiter : '');
				]]></body>
			</method>
			
			<method name="injectCandidate">
				<parameter name="cand"/>
				<parameter name="terminate"/>
				<parameter name="notify"/>
				<body><![CDATA[
					notify = (notify==null)? terminate : notify;
					
					var text = this.value;
					var word = this.getCurrentWord();
					
					var suffix = text.substr(word.caret);
					var delimiter = (terminate && suffix.charAt(0) != this.delimiter) ? this.delimiter : '';
					this.value = text.substring(0, word.start) + cand + delimiter + suffix;
					this.input.selectionStart = this.input.selectionEnd = word.start + cand.length + delimiter.length;
					
					// 削除/修正を終了し自動決定の挙動を元に戻す
					this.deleting = false
					
					if(terminate){
						// valueを変更しカーソルが見えない場所へ移動するのを防ぐ
						this.ensureCursorIsVisible();
						
						if(notify)
							this.notify();
						
						var event = document.createEvent('Events');
						event.initEvent('terminate', false, true);
						this.dispatchEvent(event);
					}
				]]></body>
			</method>
			
			<method name="getCurrentWord">
				<body><![CDATA[
					var text = this.value;
					var caret = this.selectionStart;
					var start = text.lastIndexOf(this.delimiter, caret - 1) + 1;
					
					return {
						start : start,
						caret : caret,
						hint  : text.slice(start, caret),
					};
				]]></body>
			</method>
			
			<method name="getCandidates">
				<parameter name="hint"/>
				<body><![CDATA[
					var cands = [];
					
					var escapeRegExp = function(str){
						return str.replace(/[.*+?|()\[\]{}\\]/g, '\\$&');
					}
					
					var reStrict = new RegExp('^' + escapeRegExp(hint), 'i');
					this.candidates.forEach(function(cand){
						if(reStrict.test(cand.reading))
							cands.push(cand.value);
					});
					
					if(!cands.length){
						var reLoose = new RegExp('^' + hint.split('').map(escapeRegExp).join('.*'), 'i');
						this.candidates.forEach(function(cand){
							if(reLoose.test(cand.reading))
								cands.push(cand.value);
						});
					}
					
					// 利用済みタグとして取得する
					var values = this.values;
					
					// 入力途中の内容を利用済みタグから除去する
					// 2個ある場合、片方は入力済みタグとみなす
					var index = values.indexOf(hint);
					if(~index)
						values.splice(index, 1);
					
					return cands.filter(function(cand){
						return !~values.indexOf(cand);
					});
				]]></body>
			</method>
			
			<method name="complete">
				<parameter name="denyEmpty"/>
				<body><![CDATA[
					var text = this.value;
					var word = this.getCurrentWord();
					var hint = word.hint;
					
					// 削除によりヒントがないか、または、タグ間へのスペース追加か?
					if(!hint && denyEmpty){
						this.popup.hidePopup();
						return;
					}
					
					// 自動決定か?
					var cands = this.getCandidates(hint);
					if(this.autoComplete && !this.deleting && cands.length==1 && (hint.length >=2 || cands[0].length == 1)){
						this.injectCandidate(cands[0], true);
						this.popup.hidePopup();
						return;
					}
					
					if(cands.length){
						this.popup.show(this, (this.getCursorLeft(word.start) - this.content.scrollLeft) + this.padding, -2, cands);
					} else {
						this.popup.hidePopup();
					}
				]]></body>
			</method>
			
			<method name="getCursorLeft">
				<parameter name="position"/>
				<body><![CDATA[
					this.measure.value = this.value.substr(0, position);
					this.measure.hidden = false;
					
					var x = this.measure.boxObject.width;
					this.measure.hidden = true;
					
					return x;
				]]></body>
			</method>
			
			<method name="ensureCursorIsVisible">
				<body><![CDATA[
					this.content.scrollLeft = 
						this.getCursorLeft(this.selectionStart) - this.input.offsetWidth + 20;
				]]></body>
			</method>
		</implementation>
		
		<handlers>
			<handler event="input" action="this.complete(true)" />
			<handler event="keydown"><![CDATA[
				switch (event.keyCode) {
					case KeyEvent.DOM_VK_DELETE:
					case KeyEvent.DOM_VK_BACK_SPACE:
						this.deleting = true;
						return;
				}
			]]></handler>
			<handler event="keypress"><![CDATA[
				// フォーカス移動は何も処理を行わない/遮らない
				if(event.keyCode==KeyEvent.DOM_VK_TAB && !this.popup.visible)
					return;
				
				if(this.sleeping){
					event.preventDefault();
					return;
				}
				
				// タグが完結した場合、削除/修正を終了とする
				if(this.delimiter.charCodeAt() == event.charCode)
					this.deleting = false;
				
				switch (event.keyCode) {
					case KeyEvent.DOM_VK_TAB:
					case KeyEvent.DOM_VK_DOWN:
						event.preventDefault();
						
						if(!this.popup.visible)
							this.complete();
						
						if(this.listbox.rowCount==1){
							this.listbox.enter(true)
						} else {
							this.listbox.moveCursor(1);
						}
						return;
						
					case KeyEvent.DOM_VK_UP:
						event.preventDefault();
						this.listbox.moveCursor(-1);
						return;
						
					case KeyEvent.DOM_VK_RETURN:
						if(this.popup.visible){
							this.listbox.enter(true)
						} else {
							// FIXME
						}
						return;
						
					case KeyEvent.DOM_VK_ESCAPE:
						// FIXME 入力途中の候補をクリア
						this.popup.hidePopup();
						return;
				}
			]]></handler>
		</handlers>
	</binding>
	
	
	<binding id="popup" extends="chrome://global/content/bindings/popup.xml#popup">
		<implementation>
			<field name="container">
				this.parentNode;
			</field>
			<field name="listbox">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'listbox');
			</field>
			<field name="textbox">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'textbox');
			</field>
			
			<property name="visible"
				onget="return this.state? (this.state != 'closed') : (!!this.boxObject.height);" />
			
			<method name="show">
				<parameter name="anchor"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="cands"/>
				<body><![CDATA[
					// Firefox 3
					if(this.openPopup){
						this.openPopup(anchor, 'after_start', x, y, false);
					} else {
						anchor = anchor.boxObject;
						
						// ポップアップ位置の基点を設定する
						var doc = this.ownerDocument;
						doc.popupNode = doc.documentElement;
						this.showPopup(doc.documentElement, anchor.x + x, anchor.y + anchor.height + y, 'popup');
					}
					
					if(cands){
						this.listbox.removeAll();
						this.listbox.appendItems(cands);
					}
				]]></body>
			</method>
		</implementation>
		
		<handlers>
			<handler event="blur" action="this.hidePopup()" />
		</handlers>
	</binding>
	
	
	<binding id="listbox" extends="chrome://global/content/bindings/listbox.xml#listbox">
		<implementation>
			<field name="container">
				this.parentNode.parentNode;
			</field>
			<field name="popup">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'popup');
			</field>
			<field name="textbox">
				document.getAnonymousElementByAttribute(this.container, 'anonid', 'textbox');
			</field>
			
			<field name="maxRows">
				20
			</field>
			<field name="rowCount" />
			
			<property name="rowHeight"
				onget="return this._rowHeight || (this._rowHeight = this.childNodes[0].boxObject.height)" />
			
			<property name="padding"
				onget="return this._padding || (this._padding = Math.ceil(parseFloat(window.getComputedStyle(this, '').paddingTop)))" />
			
			<method name="removeAll">
				<body><![CDATA[
					while(this.lastChild)
						this.removeChild(this.lastChild);
				]]></body>
			</method>
			
			<method name="appendItems">
				<parameter name="items"/>
				<body><![CDATA[
					for(var i=0 ; i<items.length; i++)
						this.appendItem(items[i]);
					
					// ここだけで高さや背景色を変えているため不整合が起きる可能性がある
					this.adjustSize();
				]]></body>
			</method>
			
			<method name="adjustSize">
				<body><![CDATA[
					if(!this.rowHeight){
						// 初回表示時は行高さを取得できないためrowsで調整する
						this.rows = Math.min(this.rowCount, this.maxRows);
					} else {
						// rowsの変更やheight:autoだけでは余白が生じることがあるため手動で高さを計算する
						this.height = Math.min(this.rowCount, this.maxRows) * this.rowHeight + (this.padding * 2);
					}
					
					if(this.rowCount == 1){
						this.style.backgroundColor = '#ccf0ff';
					} else {
						this.style.backgroundColor = '#ffffff';
					}
				]]></body>
			</method>
			
			<method name="moveCursor">
				<parameter name="offset"/>
				<body><![CDATA[
					var index = this.selectedIndex + offset;
					index = 
						index >= this.rowCount ? 0 : 
						index < 0 ? (this.rowCount - 1) : 
						index;
					
					// リストボックス表示直後にカーソルを動かすと表示されない時があるため再描画を促す
					if(index==0)
						this.boxObject.height;
					
					this.selectedIndex = index;
					this.ensureIndexIsVisible(index);
				]]></body>
			</method>
			
			<method name="enter">
				<parameter name="terminate"/>
				<body><![CDATA[
					var item = this.selectedItem || (this.rowCount==1 && this.firstChild);
					if(!item)
						return;
					
					this.textbox.injectCandidate(item.getAttribute('label'), terminate);
					
					if(terminate){
						this.popup.hidePopup();
						// this.textbox.focus();
					}
				]]></body>
			</method>
		</implementation>
		
		<handlers>
			<handler event="select" action="this.enter()" />
			<handler event="DOMNodeInserted"><![CDATA[
				// getRowCountメソッドは不正確な場合があるため子要素を取得しキャッシュする
				this.rowCount = this.childNodes.length;
			]]></handler>
		</handlers>
	</binding>
	
	<binding id="listitem" extends="chrome://global/content/bindings/listbox.xml#listitem">
		<handlers>
			<handler event="click" action="this.control.enter(true)" />
		</handlers>
	</binding>
</bindings>
